/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LateSignUpForm.java
 *
 * Created on 10.03.2009, 11:19:14
 */

package view.forms;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import model.Team;
import model.Tournament;
import model.User;
import model.enums.TournamentType;

import org.jdesktop.application.Action;
import org.jdesktop.observablecollections.ObservableCollections;

import view.ContentPanel;
import control.ProgressLogger;
import control.TournamentManager;
import control.UserManager;

/**
 *
 * @author Maike Dudek
 */
public class LateSignUpForm extends ContentPanel {

	private static final long serialVersionUID = 7447304548388742509L;
	private Tournament t;
    private List<User> userList;
    private List<User> selectedUsers;
    private List<User> signUpUsers;
    private List<Team> teamList;
    private Team selectedTeam;

    /** Creates new form LateSignUpForm
     * @param t Turnier für das Nachgemeldet werden soll
     */
    public LateSignUpForm(Tournament t) {
        
        this.t=t;
        userList = ObservableCollections.observableList(
                new ArrayList<User>(UserManager.getInstance().getAllUsers()));

        signUpUsers = t.getPlayers();
        userList.removeAll(signUpUsers);
        Collections.sort(userList);

        teamList = ObservableCollections.observableList(
                new ArrayList<Team>(t.getTeams()));

        initComponents();
        if(t.getType() != TournamentType.MultiPlayer){
            pnlTeams.setVisible(false);
            
        }
    }

    /**
     * Sucht nach den Anfangsbuchstaben aus dem Suchfeld in der
     * Benutzerliste.
     */
    @Action
    public void searchAction() {
        userList.clear();
        userList.addAll(UserManager.getInstance().getAllUsers());
        userList.removeAll(signUpUsers);

        // Sortieren
        Collections.sort(userList);

        // Case insensitive
        String prefix = txtSearch.getText().toLowerCase();

        // Ist prefix leer, dann ist nichts zu tun.
        if (prefix.isEmpty())
            return;

        // Alle Enträge rauswerfen, die nicht mit dem prefix-String anfangen.
        for (int i = 0; i < userList.size(); i++) {
            String name = userList.get(i).getUsername().toLowerCase();
            if (!name.startsWith(prefix)) {
                userList.remove(i);
                i--;
            }
        }
    }

    /**
     *  Gibt die Liste der markierten User wieder
     * @return Liste der markierten User
     */
    public List<User> getSelectedUsers() {
        return selectedUsers;
    }

    /**
     *  Setzt die markieren User
     * @param selectedUsers Liste der zu selektierenden User
     */
    public void setSelectedUsers(List<User> selectedUsers) {
        this.selectedUsers = selectedUsers;
        
    }

    /**
     *  Gibt eine Benutzer Liste wieder
     * @return Liste von Usern
     */
    public List<User> getUserList() {
        return userList;
    }

    /**
     * Setzt die Userliste
     * @param userList Liste der Userliste
     */
    public void setUserList(List<User> userList) {
        this.userList = userList;
    }

    /**
     *  Gibt das markierte Team wieder
     * @return markierte Team
     */
    public Team getSelectedTeam() {
        return selectedTeam;
    }

    /**
     *  Setzt das markierte Team
     * @param selectedTeam Das zu selektierende Team
     */
    public void setSelectedTeam(Team selectedTeam) {
        this.selectedTeam = selectedTeam;
    }

    /**
     *  Gibt eine Teamliste zurück
     * @return Liste von Teams
     */
    public List<Team> getTeamList() {
        return teamList;
    }

    /**
     * Setzt die Teamliste
     * @param teamList Liste von Teams
     */
    public void setTeamList(List<Team> teamList) {
        this.teamList = teamList;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        pnlUser = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listUsers = new javax.swing.JList();
        pnlTeams = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtTeamName = new javax.swing.JTextField();
        btnCreateTeam = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTeams = new javax.swing.JList();
        btnLateSignUp = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getResourceMap(LateSignUpForm.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        pnlUser.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("pnlUser.border.title"))); // NOI18N
        pnlUser.setName("pnlUser"); // NOI18N

        txtSearch.setText(resourceMap.getString("txtSearch.text")); // NOI18N
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getActionMap(LateSignUpForm.class, this);
        txtSearch.setAction(actionMap.get("searchAction")); // NOI18N
        txtSearch.setName("txtSearch"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listUsers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listUsers.setName("listUsers"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${userList}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, listUsers);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedUsers}"), listUsers, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        listUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSelectionChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listUsers);

        javax.swing.GroupLayout pnlUserLayout = new javax.swing.GroupLayout(pnlUser);
        pnlUser.setLayout(pnlUserLayout);
        pnlUserLayout.setHorizontalGroup(
            pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        pnlUserLayout.setVerticalGroup(
            pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTeams.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("pnlTeams.border.title"))); // NOI18N
        pnlTeams.setName("pnlTeams"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        txtTeamName.setText(resourceMap.getString("txtTeamName.text")); // NOI18N
        txtTeamName.setName("txtTeamName"); // NOI18N

        btnCreateTeam.setAction(actionMap.get("createTeamAction")); // NOI18N
        btnCreateTeam.setText(resourceMap.getString("btnCreateTeam.text")); // NOI18N
        btnCreateTeam.setName("btnCreateTeam"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        listTeams.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listTeams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listTeams.setName("listTeams"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${teamList}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, listTeams);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedTeam}"), listTeams, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        listTeams.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSelectionChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listTeams);

        javax.swing.GroupLayout pnlTeamsLayout = new javax.swing.GroupLayout(pnlTeams);
        pnlTeams.setLayout(pnlTeamsLayout);
        pnlTeamsLayout.setHorizontalGroup(
            pnlTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTeamsLayout.createSequentialGroup()
                        .addGroup(pnlTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(txtTeamName, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCreateTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlTeamsLayout.setVerticalGroup(
            pnlTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateTeam))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLateSignUp.setAction(actionMap.get("lateSignUpAction")); // NOI18N
        btnLateSignUp.setText(resourceMap.getString("btnLateSignUp.text")); // NOI18N
        btnLateSignUp.setName("btnLateSignUp"); // NOI18N

        btnCancel.setAction(actionMap.get("cancelAction")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(481, 481, 481))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(pnlTeams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnLateSignUp)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlTeams, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLateSignUp)
                    .addComponent(btnCancel))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void listSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSelectionChanged
        setLateSignUpEnabled(validateForm());
    }//GEN-LAST:event_listSelectionChanged

    /**
     * Ermöglicht die Erstellung eines Teams
     */
    @Action
    public void createTeamAction() {
        teamList.add(new Team(txtTeamName.getText()));
    }

    /**
     *
     */
    @Action(enabledProperty = "lateSignUpEnabled")
    public void lateSignUpAction() {
        if(t.getType() == TournamentType.SinglePlayer){
            for(User u : selectedUsers){
               TournamentManager.getInstance().lateSignup(t, u);
               ProgressLogger.getInstance().log(""+u.getName()+" wurde erfolgreich nachgemeldet.");
            }
        }
        else{
           for(User u : selectedUsers){
               TournamentManager.getInstance().lateSignup(t, selectedTeam, u);
               ProgressLogger.getInstance().log(""+u.getName()+" wurde erfolgreich im Team "+selectedTeam.getName()+" nachgemeldet.");
           }
        }

        fireCallbackEvent(true);
    }

    private boolean lateSignUpEnabled = false;
    /**
     *Gibt den Status wieder ob Nachmelden aktiviert ist
     * @return Status ob Nachmelden betätigt wurde
     */
    public boolean isLateSignUpEnabled() {
        return lateSignUpEnabled;
    }

    /**
     * Setzt den Status ob Nachmelden aktiviert ist
     * @param b Status
     */
    public void setLateSignUpEnabled(boolean b) {
        boolean old = isLateSignUpEnabled();
        this.lateSignUpEnabled = b;
        firePropertyChange("lateSignUpEnabled", old, isLateSignUpEnabled());
    }

    /**
     *Status ob die Eingaben korrekt sind
     * @return Status
     */
    public boolean validateForm(){
        boolean valid = false;
        if(t.getType() == TournamentType.SinglePlayer){
            if(selectedUsers!=null){
              valid = !selectedUsers.isEmpty();
            }
        }
        else{
            if(selectedUsers!=null && selectedTeam!=null){
              valid = (!selectedUsers.isEmpty());
            }
        }
        return valid;
    }

    /**
     *Bricht die aktuelle Aktion ab
     */
    @Action
    public void cancelAction() {
        fireCallbackEvent(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreateTeam;
    private javax.swing.JButton btnLateSignUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listTeams;
    private javax.swing.JList listUsers;
    private javax.swing.JPanel pnlTeams;
    private javax.swing.JPanel pnlUser;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTeamName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}

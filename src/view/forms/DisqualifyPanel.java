/*
 * DisqualifyPanel.java
 *
 * Created on 05.03.2009, 12:55:38
 */
package view.forms;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import model.Team;
import model.Tournament;

import org.jdesktop.application.Action;
import org.jdesktop.observablecollections.ObservableCollections;

import view.ContentPanel;
import control.ProgressLogger;
import control.TournamentManager;

/**
 * Eine Klase, die das GUI-Anzeige für das Disqualifizieren ermöglicht.
 *
 * @author Sandra ,Osama
 */
public class DisqualifyPanel extends ContentPanel {

	private static final long serialVersionUID = 929045241290822504L;
	
	Tournament currentTournament;
    private List<Team> teamList;
    private Team selectedTeam;

    /** Creates new form DisqualifyPanel
     * @param t Turnier für den der Teilnehmer disqualifiziert werden soll
     */
    public DisqualifyPanel(Tournament t) {
        currentTournament = t;

        teamList = ObservableCollections.observableList(
            new ArrayList<Team>(t.getTeams()));

        Collections.sort(teamList);

        initComponents();
    }

    /**
     * Get the value of teamList
     *
     * @return the value of teamList
     */
    public List<Team> getTeamList() {
        return teamList;
    }

    /**
     * Get the value of selectedTeam
     *
     * @return the value of selectedTeam
     */
    public Team getSelectedTeam() {
        return selectedTeam;
    }

    /**
     * Set the value of selectedTeam
     *
     * @param selectedTeam new value of selectedTeam
     */
    public void setSelectedTeam(Team selectedTeam) {
        this.selectedTeam = selectedTeam;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        lblHeader = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        teamListView = new javax.swing.JList();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getResourceMap(DisqualifyPanel.class);
        lblHeader.setFont(resourceMap.getFont("lblHeader.font")); // NOI18N
        lblHeader.setText(resourceMap.getString("lblHeader.text")); // NOI18N
        lblHeader.setName("lblHeader"); // NOI18N

        lblDescription.setText(resourceMap.getString("lblDescription.text")); // NOI18N
        lblDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblDescription.setName("lblDescription"); // NOI18N

        scrollPane.setName("scrollPane"); // NOI18N

        teamListView.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        teamListView.setName("teamListView"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${teamList}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, teamListView);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedTeam}"), teamListView, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        teamListView.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                teamListViewValueChanged(evt);
            }
        });
        scrollPane.setViewportView(teamListView);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getActionMap(DisqualifyPanel.class, this);
        btnConfirm.setAction(actionMap.get("disqualifyAction")); // NOI18N
        btnConfirm.setName("btnConfirm"); // NOI18N

        btnCancel.setAction(actionMap.get("cancelAction")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHeader)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btnConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addComponent(lblDescription, 0, 0, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
                .addGap(166, 166, 166))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * das "Bestätigungs-Button" wurde geklickt
     * das markierte Team wird disqualifiziert
     */
    private void teamListViewValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_teamListViewValueChanged
        // bei jeden klick auf der einzelnen Team in der liste
        // wird ein "label" gezeigt, wo drauf steht ob man wirklich den team disqualiifizieren möchte
        //Team team = (Team) teamListView.getSelectedValue();

        setDisqualifyActionEnabled(selectedTeam != null);
}//GEN-LAST:event_teamListViewValueChanged
    private boolean disqualifyActionEnabled = false;

    /**
     *Gibt den Status wieder ob disqualifizieren betätigt wurde
     * @return Status
     */
    public boolean isDisqualifyActionEnabled() {
        return disqualifyActionEnabled;
    }

    /**
     *Setzt den Status wieder ob disqualifizieren betätigt wurde
     * @param b Status
     */
    public void setDisqualifyActionEnabled(boolean b) {
        boolean old = isDisqualifyActionEnabled();
        this.disqualifyActionEnabled = b;
        firePropertyChange("disqualifyActionEnabled", old, isDisqualifyActionEnabled());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JList teamListView;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Der Panel wird ausgeblendet
     * wenn auf das Abbrechen-Button geklickt wird
     */
    @Action
    public void cancelAction() {
        fireCallbackEvent(false);
    }

    /** Bestätigen-Aktion */
    @Action(enabledProperty = "disqualifyActionEnabled")
    public void disqualifyAction() {

        TournamentManager.getInstance().disqualify(currentTournament, selectedTeam);
        ProgressLogger.getInstance().log("Team "+selectedTeam.getName()+
                " wurde vom Turnier "+selectedTeam.getName()+" disqualifiziert.");
        fireCallbackEvent(true);
    }
}



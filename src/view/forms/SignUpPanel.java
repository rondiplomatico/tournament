/*
 * SignUpPanel.java
 *
 * Created on 04.03.2009, 12:22:34
 */
package view.forms;

import java.awt.Color;
import java.awt.Component;
import java.util.List;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;

import model.Team;
import model.Tournament;

import org.jdesktop.application.Action;

import view.ContentPanel;
import control.ProgressLogger;
import control.TournamentManager;
import control.UserManager;

/**
 * ContentPanel für das Voranmelden für ein Multiplayer-Turnier
 * @author Maike Dudek, Sandra Mugharbel
 */
public class SignUpPanel extends ContentPanel {

    private static final long serialVersionUID = 5518213492667995541L;
    Tournament currentTournament;

    /** Creates new form SignUpPanel
     * @param t Das Turnier für das man sich anmelden kann
     */
    public SignUpPanel(Tournament t) {
        currentTournament = t;

        initComponents();

        if (t.getMaxParticipatingTeams() <= t.getTeams().size()) {
            txtTeamName.setEnabled(false);
            setCreateTeamAction(false);

            messagePanel.addMessage("Max. Anzahl der angemeldeten Mannschaften " +
                "wurde erreicht. Sie können sich nur in einer bereits vorhandenen " +
                "Mannschaft voranmelden.");
            messagePanel.renderText();
            revalidate();
        }


        initList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        lblDescr = new javax.swing.JLabel();
        messagePanel = new view.tools.MessagePanel();
        createTeamPanel = new javax.swing.JPanel();
        txtTeamName = new javax.swing.JTextField();
        btnCreateTeam = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTeams = new javax.swing.JList();
        btnVoranmelden = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(360, 386));

        lblHeader.setFont(lblHeader.getFont().deriveFont(lblHeader.getFont().getStyle() | java.awt.Font.BOLD, lblHeader.getFont().getSize()+3));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getResourceMap(SignUpPanel.class);
        lblHeader.setText(resourceMap.getString("lblHeader.text")); // NOI18N
        lblHeader.setName("lblHeader"); // NOI18N

        lblDescr.setText(resourceMap.getString("lblDescr.text")); // NOI18N
        lblDescr.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblDescr.setMinimumSize(new java.awt.Dimension(106, 90));
        lblDescr.setName("lblDescr"); // NOI18N

        messagePanel.setName("messagePanel"); // NOI18N

        createTeamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Neues Team erstellen"));
        createTeamPanel.setName("createTeamPanel"); // NOI18N

        txtTeamName.setName("txtTeamName"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getActionMap(SignUpPanel.class, this);
        btnCreateTeam.setAction(actionMap.get("createTeamAction")); // NOI18N
        btnCreateTeam.setName("btnCreateTeam"); // NOI18N

        javax.swing.GroupLayout createTeamPanelLayout = new javax.swing.GroupLayout(createTeamPanel);
        createTeamPanel.setLayout(createTeamPanelLayout);
        createTeamPanelLayout.setHorizontalGroup(
            createTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createTeamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTeamName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateTeam)
                .addContainerGap())
        );
        createTeamPanelLayout.setVerticalGroup(
            createTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createTeamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateTeam))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bereits vorgemeldete Teams"));
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listTeams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listTeams.setName("listTeams"); // NOI18N
        listTeams.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listTeamsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listTeams);

        btnVoranmelden.setAction(actionMap.get("signUpAction")); // NOI18N
        btnVoranmelden.setName("btnVoranmelden"); // NOI18N

        jButton2.setAction(actionMap.get("cancelAction")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(95, Short.MAX_VALUE)
                        .addComponent(btnVoranmelden, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnVoranmelden))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(messagePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHeader)
                                .addGap(132, 132, 132))
                            .addComponent(lblDescr, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createTeamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDescr, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listTeamsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listTeamsValueChanged
        setSignUpActionEnabled(!listTeams.isSelectionEmpty());
    }//GEN-LAST:event_listTeamsValueChanged

    /**
     * Methode zum initialisieren der Komponenten.
     * Macht das was der GUI Editor nicht macht.
     */
    @SuppressWarnings("serial")
    public void initList() {
        List<Team> lTeams = currentTournament.getTeams();
        DefaultListModel listModel = new DefaultListModel();
        for (Team t : lTeams) {
            listModel.addElement(t);
        }
        listTeams.setModel(listModel);

        listTeams.setCellRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {

                setText(((Team) value).getName());
                Color background;
                Color foreground;
                // check if this cell is selected
                if (isSelected) {
                    background = Color.PINK;
                    foreground = Color.WHITE;
                } // unselected, and not the DnD drop location
                else {
                    background = Color.WHITE;
                    foreground = Color.BLACK;
                }
                ;

                setBackground(background);
                setForeground(foreground);
                return this;
            }
        });
        listTeams.revalidate();
    }

    /**
     * Der aktuell eingeloggte User wird dem ausgewählten
     * Team hinzugefügt (und somit vorangemeldet).
     */
    @Action(enabledProperty = "signUpActionEnabled")
    public void signUpAction() {
        Team team = ((Team) listTeams.getSelectedValue());

        TournamentManager.getInstance().signup(currentTournament, team,
            UserManager.getInstance().getLoggedinUser());

        ProgressLogger.getInstance().log("Erfolgreich im Team " + team.getName() + " des Turniers " + currentTournament.getName() + " angemeldet.");
        fireCallbackEvent(true);
    }

    /**
     * Erzeugt ein neues Team mit dem vom User eingegeben Team Namen.
     */
    @Action(enabledProperty = "createTeamAction")
    public void createTeamAction() {
        ((DefaultListModel) listTeams.getModel()).addElement(new Team(txtTeamName.getText()));
        listTeams.revalidate();
    }
    private boolean createTeamAction = true;

    /**
     * Gibt wieder ob der Teamerstellmodus aktiviert ist
     *
     * @return Teamerstellmodus Status
     */
    public boolean isCreateTeamAction() {
        return createTeamAction;
    }

    /**
     * Team erstellen Modus
     * @param b Team erstellen Modus
     */
    public void setCreateTeamAction(boolean b) {
        boolean old = isCreateTeamAction();
        this.createTeamAction = b;
        firePropertyChange("createTeamAction", old, isCreateTeamAction());
    }
    private boolean signUpActionEnabled = false;

    /**
     * @return boolean
     */
    public boolean isSignUpActionEnabled() {
        return signUpActionEnabled;
    }

    /**
     * @param b
     */
    public void setSignUpActionEnabled(boolean b) {
        boolean old = isSignUpActionEnabled();
        this.signUpActionEnabled = b;
        firePropertyChange("signUpActionEnabled", old, isSignUpActionEnabled());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateTeam;
    private javax.swing.JButton btnVoranmelden;
    private javax.swing.JPanel createTeamPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescr;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JList listTeams;
    private view.tools.MessagePanel messagePanel;
    private javax.swing.JTextField txtTeamName;
    // End of variables declaration//GEN-END:variables

    /**
     * Methode zum Updaten der Liste des SignUpFensters.
     */
    public void updateList() {
        List<Team> lTeams = currentTournament.getTeams();
        DefaultListModel listModel = new DefaultListModel();
        for (Team t : lTeams) {
            listModel.addElement(t);
        }

        listTeams.setModel(listModel);
        listTeams.revalidate();
    }

    /**
     * Aktion abbrechen
     */
    @Action
    public void cancelAction() {
        fireCallbackEvent(false);
    }
}

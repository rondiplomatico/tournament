/*
 * ChooseLeadersForm.java
 *
 * Created on 06.03.2009, 20:23:09
 */
package view.forms;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.DropMode;

import model.Tournament;
import model.User;

import org.jdesktop.application.Action;
import org.jdesktop.observablecollections.ObservableCollections;

import view.ContentPanel;
import control.TournamentManager;
import control.UserManager;

/**
 * Ermöglicht das Hinzufügen und Entfernen von Leitern zu einem Turnier.
 *
 * @author Dimitri Wegner
 */
public class ChooseLeadersForm extends ContentPanel {

	private static final long serialVersionUID = 7164708848928520390L;
	
    /**
     * Userliste
     */
    public static final String PROP_USERLIST = "userList";
    /**
     * Leiterliste
     */
    public static final String PROP_LEADERLIST = "selectedLeaders";
    /**
     * Binding an Leaderliste
     */
    public static final String BINDING_LEADERLIST = "leaderListBinding";
    private List<User> userList;
    private List<User> leaderList;
    private List<User> selectedLeaders;
    private List<User> selectedUsers;
    private Tournament tournament;

    /** Creates new form SelectLeadersForm
     * @param t Turnier für das Leiter bestimmt werden sollen
     */
    public ChooseLeadersForm(Tournament t) {
        tournament = t;

        // Eine Kopie erstellen und in ObservableList wrappen, damit
        // man die Änderung nachverfolgen kann.
        userList = ObservableCollections.observableList(
            new ArrayList<User>(UserManager.getInstance().getAllUsers()));
        userList.removeAll(t.getLeaders());

        Collections.sort(userList);

        leaderList = ObservableCollections.observableList(
            new ArrayList<User>(t.getLeaders()));

        Collections.sort(leaderList);

        initComponents();

        //
        // Drag and Drop
        //

        /*ListTransferHandler<User> userListViewTH = new ListTransferHandler<User>(userList) {

            @Override
            protected Transferable createTransferable(JComponent c) {
                return new ListTransfer<User>(userListView, getSelectedUsers());
            }

            @Override
            public boolean importData(TransferSupport info) {
                boolean retval = super.importData(info);
                Collections.sort(userList);
                return retval;
            }
        };

        userListViewTH.addAcceptedSource(leaderListView);
        userListView.setTransferHandler(userListViewTH);

        // Für Drag and Drop
        leaderListView.setTransferHandler(new ListTransferHandler<User>(leaderList) {

            @Override
            protected Transferable createTransferable(JComponent c) {
                return new ListTransfer<User>(leaderListView, getSelectedLeaders());
            }

            @Override
            public boolean importData(TransferSupport info) {
                boolean retval = super.importData(info);
                Collections.sort(leaderList);
                return retval;
            }
        });*/
    }

    /**
     * Get the value of userList
     *
     * @return the value of userList
     */
    public List<User> getUserList() {
        return userList;
    }

    /**
     * Get the value of selectedLeaders
     *
     * @return the value of selectedLeaders
     */
    public List<User> getLeaderList() {
        return leaderList;
    }

    /**
     * Get the value of selectedUsers
     *
     * @return the value of selectedUsers
     */
    public List<User> getSelectedUsers() {
        return selectedUsers;
    }

    /**
     * Set the value of selectedUsers
     *
     * @param selectedUsers new value of selectedUsers
     */
    public void setSelectedUsers(List<User> selectedUsers) {
        this.selectedUsers = selectedUsers;
        setAddActionEnabled(!selectedUsers.isEmpty());
    }

    /**
     * Get the value of selectedLeaders
     *
     * @return the value of selectedLeaders
     */
    public List<User> getSelectedLeaders() {
        return selectedLeaders;
    }

    /**
     * Set the value of selectedLeaders
     *
     * @param selectedLeaders new value of selectedLeaders
     */
    public void setSelectedLeaders(List<User> selectedLeaders) {
        this.selectedLeaders = selectedLeaders;
        setRemoveActionEnabled(!selectedLeaders.isEmpty());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        lblHeader = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        panChooseLeader = new javax.swing.JPanel();
        lblUsers = new javax.swing.JLabel();
        lblChosenLeaders = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userListView = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        leaderListView = new javax.swing.JList();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setName("Form"); // NOI18N

        lblHeader.setFont(lblHeader.getFont().deriveFont(lblHeader.getFont().getStyle() | java.awt.Font.BOLD, lblHeader.getFont().getSize()+3));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getResourceMap(ChooseLeadersForm.class);
        lblHeader.setText(resourceMap.getString("lblHeader.text")); // NOI18N
        lblHeader.setName("lblHeader"); // NOI18N

        lblSearch.setLabelFor(txtSearch);
        lblSearch.setText(resourceMap.getString("lblSearch.text")); // NOI18N
        lblSearch.setName("lblSearch"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(control.MainApplication.class).getContext().getActionMap(ChooseLeadersForm.class, this);
        txtSearch.setAction(actionMap.get("searchAction")); // NOI18N
        txtSearch.setName("txtSearch"); // NOI18N

        panChooseLeader.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panChooseLeader.setName("panChooseLeader"); // NOI18N

        lblUsers.setText(resourceMap.getString("lblUsers.text")); // NOI18N
        lblUsers.setName("lblUsers"); // NOI18N

        lblChosenLeaders.setText(resourceMap.getString("lblChosenLeaders.text")); // NOI18N
        lblChosenLeaders.setName("lblChosenLeaders"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        userListView.setDragEnabled(true);
        userListView.setName("userListView"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${userList}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, this, eLProperty, userListView);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${name} (${username})"));
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedUsers}"), userListView, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(userListView);

        btnAdd.setAction(actionMap.get("addAction")); // NOI18N
        btnAdd.setName("btnAdd"); // NOI18N

        btnRemove.setAction(actionMap.get("removeAction")); // NOI18N
        btnRemove.setName("btnRemove"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        leaderListView.setDragEnabled(true);
        leaderListView.setDropMode(DropMode.ON);
        leaderListView.setName("leaderListView"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${leaderList}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, this, eLProperty, leaderListView, "leaderListBinding"); // NOI18N
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${name} (${username})"));
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedLeaders}"), leaderListView, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(leaderListView);

        javax.swing.GroupLayout panChooseLeaderLayout = new javax.swing.GroupLayout(panChooseLeader);
        panChooseLeader.setLayout(panChooseLeaderLayout);
        panChooseLeaderLayout.setHorizontalGroup(
            panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panChooseLeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panChooseLeaderLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAdd, 0, 0, Short.MAX_VALUE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
                    .addComponent(lblUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChosenLeaders))
                .addContainerGap())
        );
        panChooseLeaderLayout.setVerticalGroup(
            panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panChooseLeaderLayout.createSequentialGroup()
                .addGroup(panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsers)
                    .addComponent(lblChosenLeaders))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panChooseLeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panChooseLeaderLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnConfirm.setAction(actionMap.get("confirmAction")); // NOI18N
        btnConfirm.setName("btnConfirm"); // NOI18N

        btnCancel.setAction(actionMap.get("cancelAction")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeader)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCancel))
                        .addComponent(panChooseLeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panChooseLeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnConfirm))
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /** Fügt ausgewählt Benutzer in die Leiter-Liste hinzu. */
    @Action(enabledProperty = "addActionEnabled")
    public void addAction() {
        leaderList.addAll(getSelectedUsers());
        userList.removeAll(getSelectedUsers());

        Collections.sort(leaderList);
    }
    private boolean addActionEnabled = false;

    /**
     *  Gibt den Status wieder ob Hinzufügen aktiviert ist
     * @return Status
     */
    public boolean isAddActionEnabled() {
        return addActionEnabled;
    }

    /**
     * Setzt den Status ob Hinzufügen aktiviert ist
     * @param b Status
     */
    public void setAddActionEnabled(boolean b) {
        boolean old = isAddActionEnabled();
        this.addActionEnabled = b;
        firePropertyChange("addActionEnabled", old, isAddActionEnabled());
    }

    /** Entfernt die ausgewählten Benutzer aus der Leiter-Liste. */
    @Action(enabledProperty = "removeActionEnabled")
    public void removeAction() {
        userList.addAll(selectedLeaders);
        leaderList.removeAll(selectedLeaders);

        Collections.sort(userList);
    }
    private boolean removeActionEnabled = false;

    /**
     * Gibt den Status wieder ob Entfernen aktiviert ist
     * @return Status
     */
    public boolean isRemoveActionEnabled() {
        return removeActionEnabled;
    }

    /**
     * Setzt den Status ob Entfernen aktiviert ist
     * @param b Status
     */
    public void setRemoveActionEnabled(boolean b) {
        boolean old = isRemoveActionEnabled();
        this.removeActionEnabled = b;
        firePropertyChange("removeActionEnabled", old, isRemoveActionEnabled());
    }

    /** Bestätigt das Formular */
    @Action
    public void confirmAction() {
        TournamentManager.getInstance().setLeaders(tournament, leaderList);

        fireCallbackEvent(true);
    }

    /** Verwirft alle Änderungen. */
    @Action
    public void cancelAction() {
        fireCallbackEvent(false);
    }

    /**
     * Sucht nach den Anfangsbuchstaben aus dem Suchfeld in der
     * Benutzerliste.
     */
    @Action
    public void searchAction() {
        userList.clear();
        userList.addAll(UserManager.getInstance().getAllUsers());
        userList.removeAll(leaderList);

        // Sortieren
        Collections.sort(userList);

        // Case insensitive
        String prefix = txtSearch.getText().toLowerCase();

        // Ist prefix leer, dann ist nichts zu tun.
        if (prefix.isEmpty()) {
            return;
        }

        // Alle Enträge rauswerfen, die nicht mit dem prefix-String anfangen.
        for (int i = 0; i < userList.size(); i++) {
            String name = userList.get(i).getUsername().toLowerCase();
            if (!name.startsWith(prefix)) {
                userList.remove(i);
                i--;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblChosenLeaders;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblUsers;
    private javax.swing.JList leaderListView;
    private javax.swing.JPanel panChooseLeader;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JList userListView;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
